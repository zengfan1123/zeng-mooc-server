version: "3"
# networks:
#   zeng-fan-cli:
services:
  editor-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: editor-server # 依赖于当前 Dockerfile 创建镜像
    container_name: editor-server
    # networks:
    #   - zeng-fan-cli
    ports:
      - 8081:3311
    depends_on:
      editor-redis:
        condition: service_healthy
      editor-mysql:
        condition: service_healthy
  editor-redis:
    image: redis # 引用官网 redis 镜像
    container_name: editor-redis
    # networks:
    #   - zeng-fan-cli
    ports:
      - 6378:6379 # 宿主机可以用 127.0.0.1:6378 即可连接容器中的数据库
    environment:
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  editor-mysql:
    image: mysql:8.4.0 # 引用官网 mysqL 镜像
    container_name: editor-mysql
    restart: always # 出错则重启
    privileged: true # 高权限，执行下面的mysql/init
    # command: --default-authentication-plugin=mysql_native_password # 远程访问
    ports:
      - 3305:3306 # 宿主机可以用 127.0.0.1:3305 即可连接容器中的数据库，和 redis 一样
    volumes:
      - .docker-volumes/mysql/log:/var/log/mysql # 记录日志
      - .docker-volumes/mysql/data:/var/lib/mysql # 数据持久化
      - ./mysql/init:/docker-entrypoint-initdb.d/ # 初始化 sql
    environment:
      - MYSQL_DATABASE=imooc_lego_course # 初始化容器时创建数据库
      - MYSQL_ROOT_PASSWORD=ServBay.dev
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 10
  editor-mongo:
    image: mongo:8.0 #   mongo 镜像
    container_name: editor-mongo
    restart: always
    volumes:
      - .docker-volumes/mongo/data:/data/db # 数据持久化
    environment:
      - MONGO_INITDB_DATABASE=imooc_lego_course
      - TZ=Asia/Shanghai #设置时区
    ports:
      - "27016:27017" # 宿主机可以用  127.0.0.1:27016 即可连接容器中的数据库
